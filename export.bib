@misc{Brown2024,
   author = {Jordan Brown},
   month = {11},
   title = {Implementing Faster R-CNN for Object Detection in Python - 33rd Square},
   url = {https://www.33rdsquare.com/implementation-faster-r-cnn-python-object-detection/},
   year = {2024},
}
@misc{Rath2023,
   author = {Sovit Ranjan Rath},
   month = {5},
   title = {Train SSD300 VGG16 Model from Torchvision on Custom Dataset},
   url = {https://debuggercafe.com/train-ssd300-vgg16/},
   year = {2023},
}
@article{Ren2015,
   abstract = {State-of-the-art object detection networks depend on region proposal algorithms to hypothesize object locations. Advances like SPPnet and Fast R-CNN have reduced the running time of these detection networks, exposing region proposal computation as a bottleneck. In this work, we introduce a Region Proposal Network (RPN) that shares full-image convolutional features with the detection network, thus enabling nearly cost-free region proposals. An RPN is a fully convolutional network that simultaneously predicts object bounds and objectness scores at each position. The RPN is trained end-to-end to generate high-quality region proposals, which are used by Fast R-CNN for detection. We further merge RPN and Fast R-CNN into a single network by sharing their convolutional features---using the recently popular terminology of neural networks with 'attention' mechanisms, the RPN component tells the unified network where to look. For the very deep VGG-16 model, our detection system has a frame rate of 5fps (including all steps) on a GPU, while achieving state-of-the-art object detection accuracy on PASCAL VOC 2007, 2012, and MS COCO datasets with only 300 proposals per image. In ILSVRC and COCO 2015 competitions, Faster R-CNN and RPN are the foundations of the 1st-place winning entries in several tracks. Code has been made publicly available.},
   author = {Shaoqing Ren and Kaiming He and Ross Girshick and Jian Sun},
   doi = {10.1109/TPAMI.2016.2577031},
   issn = {01628828},
   issue = {6},
   journal = {IEEE Transactions on Pattern Analysis and Machine Intelligence},
   keywords = {Object detection,convolutional neural network,region proposal},
   month = {6},
   pages = {1137-1149},
   pmid = {27295650},
   publisher = {IEEE Computer Society},
   title = {Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks},
   volume = {39},
   url = {https://arxiv.org/abs/1506.01497v3},
   year = {2015},
}
@misc{,
   author = {James McDermott},
   title = {Hands-on Transfer Learning with Keras and the VGG16 Model – LearnDataSci},
   url = {https://www.learndatasci.com/tutorials/hands-on-transfer-learning-keras/?utm_source=chatgpt.com},
}
@misc{,
   author = {"Geeks for Geeks"},
   month = {3},
   title = {VGG-16 | CNN model - GeeksforGeeks},
   url = {https://www.geeksforgeeks.org/vgg-16-cnn-model/?utm_source=chatgpt.com},
   year = {2024},
}
@misc{,
   author = {'Torchvision'},
   title = {TorchVision Object Detection Finetuning Tutorial — PyTorch Tutorials 2.5.0+cu124 documentation},
   url = {https://pytorch.org/tutorials/intermediate/torchvision_tutorial.html?utm_source=chatgpt.com},
}
@misc{Rath2021,
   author = {Sovit Ranjan Rath},
   month = {11},
   title = {A Simple Pipeline to Train PyTorch Faster RCNN Object Detection Model},
   url = {https://debuggercafe.com/a-simple-pipeline-to-train-pytorch-faster-rcnn-object-detection-model/},
   year = {2021},
}
@misc{Rath2021,
   author = {Sovit Ranjan Rath},
   month = {7},
   title = {SSD300 VGG16 Backbone Object Detection with PyTorch and Torchvision},
   url = {https://debuggercafe.com/ssd300-vgg16-backbone-object-detection-with-pytorch-and-torchvision/?utm_source=chatgpt.com},
   year = {2021},
}
@misc{,
   author = {'PyTorch'},
   title = {SSD — Torchvision main documentation},
   url = {https://pytorch.org/vision/main/models/ssd.html?utm_source=chatgpt.com},
}
